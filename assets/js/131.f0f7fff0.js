(window.webpackJsonp=window.webpackJsonp||[]).push([[131],{791:function(t,e,s){"use strict";s.r(e);var a=s(4),i=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"规范格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#规范格式"}},[t._v("#")]),t._v(" 规范格式")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("<type>(<scope>): <subject>\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"type-必须"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#type-必须"}},[t._v("#")]),t._v(" type(必须)")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("feat：新功能（feature）。")])]),t._v(" "),s("li",[s("p",[t._v("fix/to：修复 bug，可以是 QA 发现的 BUG，也可以是研发自己发现的 BUG。")]),t._v(" "),s("ul",[s("li",[t._v("fix：产生 diff 并自动修复此问题。适合于一次提交直接修复问题")]),t._v(" "),s("li",[t._v("to：只产生 diff 不自动修复此问题。适合于多次提交。最终修复问题提交时使用 fix")])])]),t._v(" "),s("li",[s("p",[t._v("docs：文档（documentation）。")])]),t._v(" "),s("li",[s("p",[t._v("style：格式（不影响代码运行的变动）。")])]),t._v(" "),s("li",[s("p",[t._v("refactor：重构（即不是新增功能，也不是修改 bug 的代码变动）。")])]),t._v(" "),s("li",[s("p",[t._v("perf：优化相关，比如提升性能、体验。")])]),t._v(" "),s("li",[s("p",[t._v("test：增加测试。")])]),t._v(" "),s("li",[s("p",[t._v("chore：构建过程或辅助工具的变动。")])]),t._v(" "),s("li",[s("p",[t._v("revert：回滚到上一个版本。")])]),t._v(" "),s("li",[s("p",[t._v("merge：代码合并。")])]),t._v(" "),s("li",[s("p",[t._v("sync：同步主线或分支的 Bug。")])])]),t._v(" "),s("h3",{attrs:{id:"scope-可选"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scope-可选"}},[t._v("#")]),t._v(" scope(可选)")]),t._v(" "),s("p",[t._v("scope 用于说明 commit 影响的范围，比如数据层 Model、持久层 DAO、服务层 Service、控制层 Controller、视图层 View 等等，视项目不同而不同。如果你的修改影响了不止一个 scope，你可以使用*代替。")]),t._v(" "),s("h3",{attrs:{id:"subject-必须"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#subject-必须"}},[t._v("#")]),t._v(" subject(必须)")]),t._v(" "),s("p",[t._v("subject 是 commit 目的的简短描述，不超过 50 个字符。")]),t._v(" "),s("ul",[s("li",[t._v("建议使用中文。")]),t._v(" "),s("li",[t._v("结尾不加句号或其他标点符号。")])]),t._v(" "),s("h3",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("根据以上规范 git commit message 将是如下的格式")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("fix(DAO):用户查询缺少username属性\nfeat(Controller):用户查询接口开发\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("这样规范 git commit 到底有哪些好处呢？")]),t._v(" "),s("ul",[s("li",[t._v("便于程序员对提交历史进行追溯，了解发生了什么情况。")]),t._v(" "),s("li",[t._v("一旦约束了 commit message，意味着我们将慎重的进行每一次提交，不能再一股脑的把各种各样的改动都放在一个 git commit 里面，这样一来整个代码改动的历史也将更加清晰。")]),t._v(" "),s("li",[t._v("格式化的 commit message 才可以用于自动化输出 Change log。")])])])}),[],!1,null,null,null);e.default=i.exports}}]);